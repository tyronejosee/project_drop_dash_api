"""Schemas for Drivers App."""

from drf_spectacular.utils import extend_schema, OpenApiResponse

from apps.orders.serializers import OrderMinimalSerializer
from .serializers import (
    DriverReadSerializer,
    DriverWriteSerializer,
    DriverMinimalSerializer,
)


driver_schemas = {
    "list": extend_schema(
        summary="Get Several Drivers",
        description="Get a list of all available drivers.",
        responses={
            200: OpenApiResponse(DriverMinimalSerializer(many=True), description="OK"),
            400: OpenApiResponse(description="Bad request"),
            404: OpenApiResponse(description="Not found"),
        },
        tags=["drivers"],
    ),
    "create": extend_schema(
        summary="Create a Driver",
        description="Create a new driver. Encrypt the data and change the role from `IsClient to `Isdriver`, the request must be sent with `Content-Type: multipart/form-data`, only for `IsClient` users. The `user_id` is created by default, based on `request.user`.",
        request=DriverWriteSerializer,
        responses={
            201: OpenApiResponse(DriverWriteSerializer, description="Created"),
            400: OpenApiResponse(description="Bad request"),
            401: OpenApiResponse(description="Unauthorized"),
            403: OpenApiResponse(description="Forbidden"),
        },
        tags=["drivers"],
    ),
    "retrieve": extend_schema(
        summary="Get a Driver",
        description="Get detailed information about a specific driver.",
        responses={
            200: OpenApiResponse(DriverReadSerializer, description="OK"),
            400: OpenApiResponse(description="Bad request"),
            404: OpenApiResponse(description="Not found"),
        },
        tags=["drivers"],
    ),
    "update": extend_schema(
        summary="Update a Driver",
        description="Update all fields of a specific driver, if you are sending images or files, use `Content-Type: multipart/form-data`, only for `IsSupport` or `IsAdministrator` users.",
        request=DriverWriteSerializer,
        responses={
            200: OpenApiResponse(DriverWriteSerializer, description="OK"),
            400: OpenApiResponse(description="Bad request"),
            401: OpenApiResponse(description="Unauthorized"),
            403: OpenApiResponse(description="Forbidden"),
            404: OpenApiResponse(description="Not Found"),
        },
        tags=["drivers"],
    ),
    "partial_update": extend_schema(
        summary="Partial Update a Driver",
        description=(
            "Update some fields of a specific driver, if you are sending images or files, use `Content-Type: multipart/form-data`, only for `IsSupport` or `IsAdministrator` users."),
        request=DriverWriteSerializer,
        responses={
            200: OpenApiResponse(DriverWriteSerializer, description="OK"),
            400: OpenApiResponse(description="Bad request"),
            401: OpenApiResponse(description="Unauthorized"),
            403: OpenApiResponse(description="Forbidden"),
            404: OpenApiResponse(description="Not Found"),
        },
        tags=["drivers"],
    ),
    "destroy": extend_schema(
        summary="Remove a Driver",
        description="Remove a specific driver, only for `IsSupport` or `IsAdministrator` users.",
        responses={
            204: OpenApiResponse(description="No Content"),
            400: OpenApiResponse(description="Bad request"),
            401: OpenApiResponse(description="Unauthorized"),
            403: OpenApiResponse(description="Forbidden"),
            404: OpenApiResponse(description="Not Found"),
        },
        tags=["drivers"],
    ),
    "get_profile": extend_schema(
        summary="Retrieve Driver Profile",
        description="Retrieve all data from a driver's profile. The `user_id` is passed by default, based on `request.user`, only for `IsDriver` or `IsAdministrator` users.",
        responses={
            200: OpenApiResponse(DriverReadSerializer, description="OK"),
            400: OpenApiResponse(description="Your profile has been deactivated."),
            404: OpenApiResponse(description="Not found"),
        },
        tags=["drivers"],
    ),
    "get_earnings": extend_schema(
        summary="Retrieve Earnings of a Driver",
        description="Retrieve all earnings generated by a driver for the day, only for `IsDriver` or `IsAdministrator` users.",
        responses={
            200: OpenApiResponse(
                DriverReadSerializer,
                description="A dictionary with driver name and total earnings.",
            ),
            404: OpenApiResponse(description="Driver not found."),
        },
        tags=["drivers"],
    ),
    "request_resources": extend_schema(
        summary="Request Resources for a Driver",
        description="Request specific resources needed for a driver, passed as a parameter, only for `IsDriver` or `IsAdministrator` users. The `driver_id` is created by default, based on `params`.",
        request=DriverWriteSerializer,
        responses={
            201: OpenApiResponse(
                DriverWriteSerializer, description="Request successful."
            ),
            400: OpenApiResponse(
                description="You have already requested this resource."
            ),
            401: OpenApiResponse(description="Unauthorized"),
            403: OpenApiResponse(description="Forbidden"),
        },
        tags=["drivers"],
    ),
    "get_resources_history": extend_schema(
        summary="Get Resource Request History for a Driver",
        description="Get resource request history for a driver, only for `IsDriver` or `IsAdministrator` users.",
        responses={
            200: OpenApiResponse(DriverMinimalSerializer(many=True), description="OK"),
            400: OpenApiResponse(description="Bad request"),
            404: OpenApiResponse(description="Resources not found."),
        },
        tags=["drivers"],
    ),
    "toggle_availability": extend_schema(
        summary="Toggle Driver Availability",
        description="Changes the availability status of a driver. The driver can be set to either ONLINE or OFFLINE, only for `IsDriver` or `IsAdministrator` users.",
        request=DriverWriteSerializer,
        responses={
            200: OpenApiResponse(
                response=None, description="Status driver ONLINE or OFFLINE"
            ),
            400: OpenApiResponse(description="Bad request"),
            401: OpenApiResponse(description="Unauthorized"),
            403: OpenApiResponse(
                description="ou do not have permission to perform this action."
            ),
            404: OpenApiResponse(description="Driver not found."),
        },
        tags=["drivers"],
    ),
    "get_orders": extend_schema(
        summary="Get Orders for a Driver",
        description="Returns a list of orders associated with a driver, only for `IsDriver` or `IsAdministrator` users.",
        responses={
            200: OpenApiResponse(OrderMinimalSerializer(many=True), description="OK"),
            400: OpenApiResponse(description="Bad request"),
            404: OpenApiResponse(description="No orders found for this driver."),
        },
        tags=["drivers"],
    ),
    "verify_driver": extend_schema(
        summary="Verify a Newly Registered Driver",
        description="Endpoint to verify a newly registered driver passed for param (UUID), only for `IsSupport` or `IsAdministrator` users.",
        responses={
            200: OpenApiResponse(description="Driver verified successfully."),
            400: OpenApiResponse(description="The driver has already been verified."),
            401: OpenApiResponse(description="Unauthorized"),
            403: OpenApiResponse(
                description="All required documents must be submitted for verification."
            ),
            404: OpenApiResponse(description="Not Found"),
        },
        tags=["drivers"],
    ),
}
